---
source: crates/rolldown_testing/src/integration_test.rs
---
# Assets

## not-supported.js

```js

//#region not-supported.ts
var NonIntegerNumberToString = /* @__PURE__ */ function(NonIntegerNumberToString) {
	NonIntegerNumberToString["SUPPORTED"] = "1";
	NonIntegerNumberToString["UNSUPPORTED"] = "1.5";
	return NonIntegerNumberToString;
}(NonIntegerNumberToString || {});
console.log(NonIntegerNumberToString.SUPPORTED, NonIntegerNumberToString.UNSUPPORTED);
var OutOfBoundsNumberToString = /* @__PURE__ */ function(OutOfBoundsNumberToString) {
	OutOfBoundsNumberToString["SUPPORTED"] = "1000000000";
	OutOfBoundsNumberToString["UNSUPPORTED"] = "1000000000000";
	return OutOfBoundsNumberToString;
}(OutOfBoundsNumberToString || {});
console.log(OutOfBoundsNumberToString.SUPPORTED, OutOfBoundsNumberToString.UNSUPPORTED);
var TemplateExpressions = /* @__PURE__ */ function(TemplateExpressions) {
	TemplateExpressions[TemplateExpressions["NULL"] = "null"] = "NULL";
	TemplateExpressions[TemplateExpressions["TRUE"] = "true"] = "TRUE";
	TemplateExpressions[TemplateExpressions["FALSE"] = "false"] = "FALSE";
	TemplateExpressions[TemplateExpressions["BIGINT"] = "123"] = "BIGINT";
	return TemplateExpressions;
}(TemplateExpressions || {});
console.log(TemplateExpressions.NULL, TemplateExpressions.TRUE, TemplateExpressions.FALSE, TemplateExpressions.BIGINT);

//#endregion
```
## supported.js

```js

//#region supported.ts
var Foo = /* @__PURE__ */ function(Foo) {
	Foo[Foo["X0"] = 123] = "X0";
	Foo["X1"] = "x";
	Foo[Foo["X2"] = 1] = "X2";
	Foo[Foo["X3"] = -2] = "X3";
	Foo[Foo["X4"] = -4] = "X4";
	Foo[Foo["X5"] = 3] = "X5";
	Foo[Foo["X6"] = -1] = "X6";
	Foo[Foo["X7"] = 6] = "X7";
	Foo[Foo["X8"] = .5] = "X8";
	Foo[Foo["X9"] = 1] = "X9";
	Foo[Foo["X10"] = 8] = "X10";
	Foo[Foo["X11"] = 4] = "X11";
	Foo[Foo["X12"] = -5] = "X12";
	Foo[Foo["X13"] = 2147483643] = "X13";
	Foo[Foo["X14"] = 13] = "X14";
	Foo[Foo["X15"] = 4] = "X15";
	Foo[Foo["X16"] = 9] = "X16";
	Foo["X17"] = "x0";
	Foo["X18"] = "0x";
	Foo["X19"] = "xy";
	Foo["X20"] = "NaN";
	Foo["X21"] = "Infinity";
	Foo["X22"] = "-Infinity";
	Foo["X23"] = "0";
	Foo["X24"] = "ABCD";
	Foo[Foo["X25"] = 321] = "X25";
	Foo[Foo["X26"] = 123] = "X26";
	Foo["X27"] = "123x";
	Foo["X28"] = "x123";
	Foo["X29"] = "ab";
	Foo[Foo["X30"] = Foo.X0] = "X30";
	Foo[Foo["X31"] = Foo.X0 + "x"] = "X31";
	Foo[Foo["X32"] = "x" + Foo.X0] = "X32";
	Foo["X33"] = "ab";
	Foo["X34"] = "x";
	Foo["X35"] = "xy";
	Foo["X36"] = "yx";
	Foo["X37"] = "ab";
	Foo[Foo["X38"] = Foo["X1"]] = "X38";
	Foo[Foo["X39"] = Foo["X1"] + "y"] = "X39";
	Foo[Foo["X40"] = "y" + Foo["X1"]] = "X40";
	Foo["X41"] = "ab";
	return Foo;
}(Foo || {});
console.log(
	// a number or string literal,
	Foo.X0,
	Foo.X1,
	// a unary +, -, or ~ applied to a numeric constant expression,
	Foo.X2,
	Foo.X3,
	Foo.X4,
	// a binary +, -, *, /, %, **, <<, >>, >>>, |, &, ^ applied to two numeric constant expressions,
	Foo.X5,
	Foo.X6,
	Foo.X7,
	Foo.X8,
	Foo.X9,
	Foo.X10,
	Foo.X11,
	Foo.X12,
	Foo.X13,
	Foo.X14,
	Foo.X15,
	Foo.X16,
	// a template expression where each substitution expression is a constant expression,
	Foo.X17,
	Foo.X18,
	Foo.X19,
	Foo.X20,
	Foo.X21,
	Foo.X22,
	Foo.X23,
	// a template expression where each substitution expression is a constant expression,
	Foo.X24,
	// a parenthesized constant expression,
	Foo.X25,
	// a dotted name that references an enum member with an enum literal type, or
	Foo.X26,
	Foo.X27,
	Foo.X28,
	Foo.X29,
	Foo.X30,
	Foo.X31,
	Foo.X32,
	Foo.X33,
	// a dotted name indexed by a string literal (e.g. x.y["z"]) that references an enum member with an enum literal type."
	Foo.X34,
	Foo.X35,
	Foo.X36,
	Foo.X37,
	Foo.X38,
	Foo.X39,
	Foo.X40,
	Foo.X41
);

//#endregion
```
